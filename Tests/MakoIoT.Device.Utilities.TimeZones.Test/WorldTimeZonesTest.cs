
using nanoFramework.TestFramework;

namespace MakoIoT.Device.Utilities.TimeZones.Test
{
    [TestClass]
    public class WorldTimeZonesTest
    {
        [DataRow("<-12>12")]
        [DataRow("<-11>11")]
        [DataRow("HST10HDT,M3.2.0,M11.1.0")]
        [DataRow("HST10")]
        [DataRow("<-0930>9:30")]
        [DataRow("AKST9AKDT,M3.2.0,M11.1.0")]
        [DataRow("<-09>9")]
        [DataRow("PST8PDT,M3.2.0,M11.1.0")]
        [DataRow("<-08>8")]
        [DataRow("MST7")]
        [DataRow("MST7MDT,M3.2.0,M11.1.0")]
        [DataRow("CST6")]
        [DataRow("CST6CDT,M3.2.0,M11.1.0")]
        [DataRow("<-06>6<-05>,M9.1.6/22,M4.1.6/22")]
        [DataRow("<-05>5")]
        [DataRow("EST5")]
        [DataRow("EST5EDT,M3.2.0,M11.1.0")]
        [DataRow("CST5CDT,M3.2.0/0,M11.1.0/1")]
        [DataRow("<-04>4<-03>,M10.1.0/0,M3.4.0/0")]
        [DataRow("AST4ADT,M3.2.0,M11.1.0")]
        [DataRow("<-04>4")]
        [DataRow("<-04>4<-03>,M9.2.0/0,M4.1.0/0")]
        [DataRow("NST3:30NDT,M3.2.0,M11.1.0")]
        [DataRow("<-03>3")]
        [DataRow("<-03>3<-02>,M3.2.0,M11.1.0")]
        [DataRow("<-02>2")]
        [DataRow("<-01>1<+00>,M3.5.0/0,M10.5.0/1")]
        [DataRow("<-01>1")]
        [DataRow("UTC0")]
        [DataRow("GMT0BST,M3.5.0/1,M10.5.0")]
        [DataRow("GMT0")]
        [DataRow("<+01>-1")]
        [DataRow("CET-1CEST,M3.5.0,M10.5.0/3")]
        [DataRow("WAT-1")]
        [DataRow("EET-2EEST,M3.5.0/3,M10.5.0/4")]
        [DataRow("EET-2EEST,M3.5.0/0,M10.5.0/0")]
        [DataRow("EET-2")]
        [DataRow("EET-2EEST,M3.5.0,M10.5.0/3")]
        [DataRow("EET-2EEST,M3.5.6,M10.5.6")]
        [DataRow("SAST-2")]
        [DataRow("IST-2IDT,M3.5.5,M10.5.0")]
        [DataRow("CAT-2")]
        [DataRow("<+03>-3")]
        [DataRow("MSK-3")]
        [DataRow("EAT-3")]
        [DataRow("<+0330>-3:30")]
        [DataRow("<+04>-4")]
        [DataRow("<+0430>-4:30")]
        [DataRow("<+05>-5")]
        [DataRow("PKT-5")]
        [DataRow("IST-5:30")]
        [DataRow("<+0530>-5:30")]
        [DataRow("<+0545>-5:45")]
        [DataRow("<+06>-6")]
        [DataRow("<+0630>-6:30")]
        [DataRow("<+07>-7")]
        [DataRow("CST-8")]
        [DataRow("<+08>-8")]
        [DataRow("AWST-8")]
        [DataRow("<+0845>-8:45")]
        [DataRow("<+09>-9")]
        [DataRow("JST-9")]
        [DataRow("KST-9")]
        [DataRow("ACST-9:30ACDT,M10.1.0,M4.1.0/3")]
        [DataRow("ACST-9:30")]
        [DataRow("AEST-10")]
        [DataRow("AEST-10AEDT,M10.1.0,M4.1.0/3")]
        [DataRow("<+10>-10")]
        [DataRow("<+1030>-10:30<+11>-11,M10.1.0,M4.1.0")]
        [DataRow("<+11>-11")]
        [DataRow("<+11>-11<+12>,M10.1.0,M4.1.0/3")]
        [DataRow("<+12>-12")]
        [DataRow("NZST-12NZDT,M9.5.0,M4.1.0/3")]
        [DataRow("<+1245>-12:45<+1345>,M9.5.0/2:45,M4.1.0/3:45")]
        [DataRow("<+13>-13")]
        [DataRow("<+14>-14")]
        public void FromPosixString_should_parse(string input)
        {
            var result = TimeZoneConverter.FromPosixString(input);
            Assert.IsNotNull(result);
        }
    }
}
